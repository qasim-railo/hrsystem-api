using AutoMapper;
using HRSystem.API.Data;
using HRSystem.API.DTOs;
using HRSystem.API.Models;
using Microsoft.EntityFrameworkCore;

namespace HRSystem.API.Services
{
    public class EmployeeService : IEmployeeService
    {
        private readonly AppDbContext _context;
        private readonly IMapper _mapper;
        public EmployeeService(AppDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<List<EmployeeDto>> GetAllAsync()
        {
            var e = await _context.Employees.ToListAsync();
            return _mapper.Map<List<EmployeeDto>>(e);
            
        }

        public async Task<EmployeeDto> GetByIdAsync(int id)
        {
            var e = await _context.Employees.FindAsync(id);
            if (e == null) return null;
            return _mapper.Map<EmployeeDto>(e);
          
        }

        public async Task<EmployeeDto> CreateAsync(EmployeeDto dto)
        {
            var departmentExists = await _context.Department.AnyAsync(d => d.DepartmentId == dto.DepartmentId);
            if (!departmentExists)
                throw new Exception("Invalid DepartmentId.");
            var entity = new Employee
            {
                //EmployeeId = dto.EmployeeId, // Optional if auto-generated by DB
                CompanyId = dto.CompanyId,
                DepartmentId = dto.DepartmentId, // ✅ Ensure this property exists in your DTO

                EmployeeCode = dto.EmployeeCode,
                FirstName = dto.FirstName,
                LastName = dto.LastName,
                DateOfBirth = dto.DateOfBirth,
                Gender = dto.Gender,
                Nationality = dto.Nationality,
                MotherName = dto.MotherName,
                HomeCountryAddress = dto.HomeCountryAddress,
                HomeCountryPhone = dto.HomeCountryPhone,
                EmergencyContactName = dto.EmergencyContactName,
                EmergencyPhone = dto.EmergencyPhone,
                Email = dto.Email,
                PassportNumber = dto.PassportNumber,
                PassportExpiry = dto.PassportExpiry,
                PassportCountry = dto.PassportCountry,
                PhotoPath = dto.PhotoPath,

            };

            _context.Employees.Add(entity);
            await _context.SaveChangesAsync();

            dto.EmployeeId = entity.EmployeeId;
            return dto;
        }

      public async Task<EmployeeDto> UpdateAsync(int id, EmployeeDto dto)
{
            //var employee = await _context.Employees.FindAsync(id);
            //if (employee == null) return null;

            //_mapper.Map(dto, employee);
            //await _context.SaveChangesAsync();
            //return _mapper.Map<EmployeeDto>(employee);

            var e = await _context.Employees.FindAsync(id);
    if (e == null) return null;

    e.CompanyId = dto.CompanyId;
    e.EmployeeCode = dto.EmployeeCode;
    e.FirstName = dto.FirstName;
    e.LastName = dto.LastName;
    e.DateOfBirth = dto.DateOfBirth;
    e.Gender = dto.Gender;
    e.Nationality = dto.Nationality;
    e.MotherName = dto.MotherName;
    e.HomeCountryAddress = dto.HomeCountryAddress;
    e.HomeCountryPhone = dto.HomeCountryPhone;
    e.EmergencyContactName = dto.EmergencyContactName;
    e.EmergencyPhone = dto.EmergencyPhone;
    e.Email = dto.Email;
    e.PassportNumber = dto.PassportNumber;
    e.PassportExpiry = dto.PassportExpiry;
    e.PassportCountry = dto.PassportCountry;
    e.PhotoPath = dto.PhotoPath;

    await _context.SaveChangesAsync();
    return dto;
}


        public async Task<bool> DeleteAsync(int id)
        {
            var e = await _context.Employees.FindAsync(id);
            if (e == null) return false;

            _context.Employees.Remove(e);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}
